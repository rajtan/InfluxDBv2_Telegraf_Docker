## ------------------------------------------------------------------
##
## Input from MODBUS Slave devices
##

[[inputs.modbus]]
  ## Connection Configuration
  ##
  ## The plugin supports connections to PLCs via MODBUS/TCP, RTU over TCP, ASCII over TCP or
  ## via serial line communication in binary (RTU) or readable (ASCII) encoding
  ##
  ## Device name
  name = "modbus"
  tags = {input_src = "modbus", bucket = "bkt_1y"}

  # delete redundant tag in modbus as we have already added input_src and modbus_loop tags      
  tagexclude = ["name","type", "slave_id"]

  ## Slave ID - addresses a MODBUS device on the bus
  ## Range: 0 - 255 [0 = broadcast; 248 - 255 = reserved]
  slave_id = 3

  ## Timeout for each request
  timeout = "4s"

  ## Maximum number of retries and the time to wait between retries
  ## when a slave-device is busy.
  busy_retries = 2
  busy_retries_wait = "500ms"

  # TCP - connect via Modbus/TCP
  # controller = "tcp://localhost:502"

  ## Serial (RS485; RS232)
  ## For RS485 specific setting check the end of the configuration.
  ## For unix-like operating systems use:
  controller = "file:///dev/ttyUSB0"
  ## For Windows operating systems use:
  # controller = "COM1"
  baud_rate = 2400
  data_bits = 8
  parity = "E"
  stop_bits = 1

  # transmission_mode = "auto" / "TCP" / "RTU" / "RTUoverTCP"
  transmission_mode = "auto"

  # debug_connection = false

  configuration_type = "request"

  #metricpass = "fields.temperature > 90" 
  #metricpass = "(tags.dev_type!='mb-tmp-01') && (fields.temperature < 50) &&  (fields.temperature > 0)" 
  metricpass = '''
   ((tags.sens_chan_type=='temprh-dht22') && (fields.temperature < 50) && (fields.temperature > 0) && (fields.rh >= 1) && (fields.rh <= 100)) ||
   ((tags.sens_chan_type=='temp-ds18b20') && (fields.temperature < 50) &&  (fields.temperature > 0 ))
   '''
  

  ## --- "request" configuration style ---

  ## Define a request sent to the device
  ## Multiple of those requests can be defined. Data will be collated into metrics at the end of data collection.
  # [[inputs.modbus.request]]
    ## ID of the modbus slave device to query.
    ## If you need to query multiple slave-devices, create several "request" definitions.
    ## slave_id = 3

    # byte_order = "ABCD"

    # register = "holding"

    ## Name of the measurement.
    ## Can be overriden by the individual field definitions. Defaults to "modbus"
    # measurement = "modbus"

    # optimization = "none"

    # optimization_max_register_fill = 50

  [[inputs.modbus.request]]
    slave_id = 3
    byte_order = "ABCD"
    register = "holding"
    fields = [
      { address=4, name="temperature",      type="INT16",   scale=0.01, measurement="proc_measure"   },
    ]

    [inputs.modbus.request.tags]
      modbus_loop="l1"
      dev_no = "mb01-001"
      dev_type="mb-t3rh"
      sens_group = "cooling"
      sens_chan_no="1"
      sens_chan_type="temp-ds18b20"
      sens_section = "hvac"
      sens_location = "control_room"

  [[inputs.modbus.request]]
    slave_id = 3
    byte_order = "ABCD"
    register = "holding"
    fields = [
      { address=15, name="temperature",     type="INT16",   scale=0.01, measurement="proc_measure" },
      { address=16, name="rh",              type="INT16",   scale=0.01, measurement="proc_measure" },
    ]

    [inputs.modbus.request.tags]
      modbus_loop="l1"
      dev_no = "mb01-001"
      dev_type="mb-t3rh"
      sens_group = "cooling"
      sens_chan_no="3"
      sens_chan_type="temprh-dht22"
      sens_section = "hvac"
      sens_location = "ambient"


  ## RS485 specific settings. Only take effect for serial controllers.
  ## Note: This has to be at the end of the modbus configuration due to
  ## TOML constraints.
  # [inputs.modbus.rs485]
    ## Delay RTS prior to sending
    # delay_rts_before_send = "0ms"
    ## Delay RTS after to sending
    # delay_rts_after_send = "0ms"
    ## Pull RTS line to high during sending
    # rts_high_during_send = false
    ## Pull RTS line to high after sending
    # rts_high_after_send = false
    ## Enabling receiving (Rx) during transmission (Tx)
    # rx_during_tx = false

  ## Enable workarounds required by some devices to work correctly
  # [inputs.modbus.workarounds]
    ## Pause after connect delays the first request by the specified time.
    ## This might be necessary for (slow) devices.
    # pause_after_connect = "0ms"

    ## Pause between read requests sent to the device.
    ## This might be necessary for (slow) serial devices.
    # pause_between_requests = "0ms"

    ## Close the connection after every gather cycle.
    ## Usually the plugin closes the connection after a certain idle-timeout,
    ## however, if you query a device with limited simultaneous connectivity
    ## (e.g. serial devices) from multiple instances you might want to only
    ## stay connected during gather and disconnect afterwards.
    # close_connection_after_gather = false

    ## Force the plugin to read each field in a separate request.
    ## This might be necessary for devices not conforming to the spec,
    ## see https://github.com/influxdata/telegraf/issues/12071.
    # one_request_per_field = false

    ## Enforce the starting address to be zero for the first request on
    ## coil registers. This is necessary for some devices see
    ## https://github.com/influxdata/telegraf/issues/8905
    # read_coils_starting_at_zero = false

      
